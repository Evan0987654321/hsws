sm.density.compare(cr$MPG.city, as.integer(cr$DriveTrain), xlab="MPG, city", col=cv)
title(main="City MPG Distribution by Drivetrain")
# add legend to indicate identities of line colors
cl = levels(factor(cr$DriveTrain))
legend(x="topright", cl, fill=cv)
par(mfrow=c(1,1))
par(mfrow=c(1,2))
# plot the densities:
cv=c("green", "blue","red")
sm.density.compare(cr$MPG.highway, as.integer(cr$DriveTrain), xlab="MPG, highway", col=cv)
title(main="Highway MPG Distribution by Drivetrain")
# add legend to indicate identities of line colors
cl = levels(factor(cr$DriveTrain))
legend(x="topright", cl, fill=cv)
# compare MPGs for drivetrain
# plot the densities:
sm.density.compare(cr$MPG.city, as.integer(cr$DriveTrain), xlab="MPG, city", col=cv)
title(main="City MPG Distribution by Drivetrain")
# add legend to indicate identities of line colors
cl = levels(factor(cr$DriveTrain))
legend(x="topright", cl, fill=cv)
par(mfrow=c(1,1))
# cl = levels(factor(cr$DriveTrain))
source('~/ccr-office/summer-workshop/2013/workshop-dev/examples/histograms-Cars93.R')
library(sm) # library, "Smoothing methods for...density estimation"
cv=("blue","red")
sm.density.compare(x=exp$class3_crystal,
group=exp$human_crystal,
xlab="crystal classifier score",
model="none",
col=cv)
cl = c("No crystal","Crystal")
legend(x="topright",
cl,
fill=cv,
title="Crystal Seen?")
library(sm) # library, "Smoothing methods for...density estimation"
cv=("blue","red")
# load needed libraries
library("pROC")
library("RCurl")
# read csv data from github:
url="https://raw.github.com/jsperhac/workshop-dev/master/project/protein-data/R-experiment.csv"
exp=getURL(url)
exp = read.csv(textConnection(exp))
library(sm) # library, "Smoothing methods for...density estimation"
cv=("blue","red")
sm.density.compare(x=exp$class3_crystal,
group=exp$human_crystal,
xlab="crystal classifier score",
model="none",
col=cv)
cl = c("No crystal","Crystal")
legend(x="topright",
cl,
fill=cv,
title="Crystal Seen?")
cv=("blue","red")
cv=c("blue","red")
sm.density.compare(x=exp$class3_crystal,
group=exp$human_crystal,
xlab="crystal classifier score",
model="none",
col=cv)
cl = c("No crystal","Crystal")
legend(x="topright",
cl,
fill=cv,
title="Crystal Seen?")
library(sm) # library, "Smoothing methods for...density estimation"
cv=c("blue","red")
sm.density.compare(x=exp$class3_crystal,
group=exp$human_crystal,
xlab="crystal classifier score",
model="none",
col=cv,
title="test")
cl = c("No crystal","Crystal")
legend(x="topright",
cl,
fill=cv,
title="Crystal Seen?")
library(sm) # library, "Smoothing methods for...density estimation"
cv=c("blue","red")
sm.density.compare(x=exp$class3_crystal,
group=exp$human_crystal,
xlab="crystal classifier score",
model="none",
col=cv,
main="test")
cl = c("No crystal","Crystal")
legend(x="topright",
cl,
fill=cv,
title="Crystal Seen?")
library(sm) # library, "Smoothing methods for...density estimation"
cv=c("blue","red")
sm.density.compare(x=exp$class3_crystal,
group=exp$human_crystal,
xlab="crystal classifier score",
model="none",
col=cv)
title(main="Classifications with crystal score")
cl = c("No crystal","Crystal")
legend(x="topright",
cl,
fill=cv,
title="Crystal Seen?")
yl=c(0,25)
xl=c(0.3, 0.51)
# plot the neg, non-crystal subset; specify axis label, plot title
plot(density(neg,bw=0.003),
col="blue",
main="Density Curves of\nMachine and Human Classifications",
xlab="Classifier Crystal Score",
ylim=yl,
xlim=xl)
# do the overplotting with the pos crystal subset
lines(density(pos,bw=0.003),
col="red",
ylim=yl,
xlim=xl)
grid(col="grey") # add a grid
# add a legend to identify each line clearly
legend(x="topright",
title="Classification",
c("Non-Crystal","Crystal"),
fill=c("blue","red"))
# Make subsets of the classifier scores, for crystal and non-crystal samples:
neg <- exp$class3_crystal[which(exp$human_crystal==FALSE)] # neg => negative == not crystal
pos <- exp$class3_crystal[which(exp$human_crystal==TRUE)] # pos => positive == crystal
# note that you can also use syntax like this:
# pos2 = exp[exp$human_crystal==TRUE,"class3_crystal"]
# how many examples in each of these subsets?
length(neg)
length(pos)
# use same x and y limits in each plot
yl=c(0,25)
xl=c(0.3, 0.51)
# plot the neg, non-crystal subset; specify axis label, plot title
plot(density(neg,bw=0.003),
col="blue",
main="Density Curves of\nMachine and Human Classifications",
xlab="Classifier Crystal Score",
ylim=yl,
xlim=xl)
# do the overplotting with the pos crystal subset
lines(density(pos,bw=0.003),
col="red",
ylim=yl,
xlim=xl)
grid(col="grey") # add a grid
# add a legend to identify each line clearly
legend(x="topright",
title="Classification",
c("Non-Crystal","Crystal"),
fill=c("blue","red"))
yl=c(0,13)
xl=c(0.3, 0.51)
# how many points in each subset?
ln=length(neg)
lp=length(pos)
len = ln+lp
# basic plot: non-crystal subset
# use weight parameter to normalize the density we will draw.
plot(density(neg,bw=0.003,weights=rep(1/len,ln)),
col="blue",
main="Weighted Density Curves of\nMachine and Human Classifications",
xlab="Classifier Crystal Score",
ylim=yl,
xlim=xl)
# the overplotting: crystal subset
lines(density(pos,bw=0.003,weights=rep(1/len,lp)),
col="red",
ylim=yl,
xlim=xl)
grid(col="grey")
legend(x="topright",
title="Classification",
c("Non-Crystal","Crystal"),
fill=c("blue","red"))
# you can see that the optimal cutpoint is ~0.42. Wow.
p1 = hist(neg, plot=F)
p2 = hist(pos, plot=F)
xl=c(0.3,0.5)
plot(p1, col="darkblue",
xlim=xl,
xlab="crystal classification score",
main="Histogram of Crystal Classifications")
plot(p2,
col="red",
xlim=xl,
add=TRUE) # specifies overplotting
grid(col="grey")
legend(x="topright",                         # location for legend
title="Non-Crystal/Crystal",          # title for legend
rownames(table(exp$human_crystal) ),  # names in legend
fill=c("darkblue", "red"))            # colors for legend
# use same x and y limits in each plot
yl=c(0,25)
xl=c(0.3, 0.51)
# plot the neg, non-crystal subset; specify axis label, plot title
plot(density(neg),
col="blue",
main="Density Curves of\nMachine and Human Classifications",
xlab="Classifier Crystal Score",
ylim=yl,
xlim=xl)
# do the overplotting with the pos crystal subset
lines(density(pos),
col="red",
ylim=yl,
xlim=xl)
grid(col="grey") # add a grid
# add a legend to identify each line clearly
legend(x="topright",
title="Classification",
c("Non-Crystal","Crystal"),
fill=c("blue","red"))
?density
yl=c(0,13)
xl=c(0.3, 0.51)
# how many points in each subset?
ln=length(neg)
lp=length(pos)
len = ln+lp
plot(density(neg,weights=NULL),
col="blue",
main="Weighted Density Curves of\nMachine and Human Classifications",
xlab="Classifier Crystal Score",
ylim=yl,
xlim=xl)
compareDensityPlots <- function(w) {
# how many points in each subset?
ln=length(neg)
lp=length(pos)
len = ln+lp
# do weighting according to user selection
posWt = NULL
negWt = NULL
if (w==TRUE) {
posWt = rep(1/len,lp)
negWt = rep(1/len,ln)
}
# a posteriori limits on x and y to enforce for both curves:
yl=c(0,13)
xl=c(0.3, 0.51)
# basic plot: non-crystal subset
# use weight parameter to normalize the density we will draw.
plot(density(neg,weights=negWt),
col="blue",
main="Weighted Density Curves of\nMachine and Human Classifications",
xlab="Classifier Crystal Score",
ylim=yl,
xlim=xl)
# the overplotting: crystal subset
lines(density(pos,weights=posWt),
col="red",
ylim=yl,
xlim=xl)
grid(col="grey")
legend(x="topright",
title="Classification",
c("Non-Crystal","Crystal"),
fill=c("blue","red"))
}
compareDensityPlots(w=TRUE)
compareDensityPlots(w=FALSE)
compareDensityPlots <- function(w) {
# how many points in each subset?
ln=length(neg)
lp=length(pos)
len = ln+lp
# do weighting according to user selection
posWt = NULL
negWt = NULL
yl=c(0,25)
xl=c(0.3, 0.51)
if (w==TRUE) {
posWt = rep(1/len,lp)
negWt = rep(1/len,ln)
# a posteriori limits on x and y to enforce for both curves:
yl=c(0,13)
xl=c(0.3, 0.51)
}
# basic plot: non-crystal subset
# use weight parameter to normalize the density we will draw.
plot(density(neg,weights=negWt),
col="blue",
main="Weighted Density Curves of\nMachine and Human Classifications",
xlab="Classifier Crystal Score",
ylim=yl,
xlim=xl)
# the overplotting: crystal subset
lines(density(pos,weights=posWt),
col="red",
ylim=yl,
xlim=xl)
grid(col="grey")
legend(x="topright",
title="Classification",
c("Non-Crystal","Crystal"),
fill=c("blue","red"))
}
compareDensityPlots(w=FALSE)
compareDensityPlots(w=TRUE)
args(compareDensityPlots)
str(args(compareDensityPlots))
formals(compareDensityPlots)
length(formals(compareDensityPlots))
compareDensityPlots <- function(neg, pos, w=FALSE) {
if (length(formals(compareDensityPlots)) < 2) {
return("argument list: negative cases, positive cases, weight")
}
# how many points in each subset?
ln=length(neg)
lp=length(pos)
len = ln+lp
# do weighting according to user selection
posWt = NULL
negWt = NULL
yl=c(0,25)
xl=c(0.3, 0.51)
if (w==TRUE) {
posWt = rep(1/len,lp)
negWt = rep(1/len,ln)
# a posteriori limits on x and y to enforce for both curves:
yl=c(0,13)
xl=c(0.3, 0.51)
}
# basic plot: non-crystal subset
# use weight parameter to normalize the density we will draw.
plot(density(neg,weights=negWt),
col="blue",
main="Weighted Density Curves of\nMachine and Human Classifications",
xlab="Classifier Crystal Score",
ylim=yl,
xlim=xl)
# the overplotting: crystal subset
lines(density(pos,weights=posWt),
col="red",
ylim=yl,
xlim=xl)
grid(col="grey")
legend(x="topright",
title="Classification",
c("Non-Crystal","Crystal"),
fill=c("blue","red"))
}
compareDensityPlots(neg, pos, w=TRUE)
compareDensityPlots(w=FALSE)
compareDensityPlots(neg, w=FALSE)
compareDensityPlots <- function(neg, pos, w) {
# how many points in each subset?
ln=length(neg)
lp=length(pos)
len = ln+lp
# do weighting according to user selection
posWt = NULL
negWt = NULL
yl=c(0,25)
xl=c(0.3, 0.51)
if (w==TRUE) {
posWt = rep(1/len,lp)
negWt = rep(1/len,ln)
# a posteriori limits on x and y to enforce for both curves:
yl=c(0,13)
xl=c(0.3, 0.51)
}
# basic plot: non-crystal subset
# use weight parameter to normalize the density we will draw.
plot(density(neg,weights=negWt),
col="blue",
main="Weighted Density Curves of\nMachine and Human Classifications",
xlab="Classifier Crystal Score",
ylim=yl,
xlim=xl)
# the overplotting: crystal subset
lines(density(pos,weights=posWt),
col="red",
ylim=yl,
xlim=xl)
grid(col="grey")
legend(x="topright",
title="Classification",
c("Non-Crystal","Crystal"),
fill=c("blue","red"))
}
compareDensityPlots(neg, pos)
compareDensityPlots <- function(neg, pos, w=FALSE) {
# how many points in each subset?
ln=length(neg)
lp=length(pos)
len = ln+lp
# do weighting according to user selection
posWt = NULL
negWt = NULL
yl=c(0,25)
xl=c(0.3, 0.51)
if (w==TRUE) {
posWt = rep(1/len,lp)
negWt = rep(1/len,ln)
# a posteriori limits on x and y to enforce for both curves:
yl=c(0,13)
xl=c(0.3, 0.51)
}
# basic plot: non-crystal subset
# use weight parameter to normalize the density we will draw.
plot(density(neg,weights=negWt),
col="blue",
main="Weighted Density Curves of\nMachine and Human Classifications",
xlab="Classifier Crystal Score",
ylim=yl,
xlim=xl)
# the overplotting: crystal subset
lines(density(pos,weights=posWt),
col="red",
ylim=yl,
xlim=xl)
grid(col="grey")
legend(x="topright",
title="Classification",
c("Non-Crystal","Crystal"),
fill=c("blue","red"))
}
compareDensityPlots(neg, pos)
cutpoint = c(0.3,0.35,0.4,0.43,0.45,0.5)
# Do you have a sense of which are better classification thresholds? Which are worse?
confusionMatrix = function(cut) {
# true positives: human called it positive, so did classifier
tp = length( exp[ exp$human_crystal==TRUE & exp$class3_crystal > cut, "human_crystal"] )
# true negatives
tn = length( exp[ exp$human_crystal==FALSE & exp$class3_crystal < cut, "human_crystal"] )
# false positives
fp = length( exp[ exp$human_crystal==FALSE & exp$class3_crystal >= cut, "human_crystal"] )
# false negatives
fn = length( exp[ exp$human_crystal==TRUE & exp$class3_crystal <= cut, "human_crystal"] )
# assemble them into a data frame to return:
matrix = data.frame(cutpoint=cut, tp=tp, tn=tn, fp=fp, fn=fn)
print(matrix)
}
# now apply the confusionMatrix function to each cutpoint (threshold) in our list:
sapply(X=cutpoint, FUN=confusionMatrix)
setwd("~/ccr-office/summer-workshop/2013/project/protein-data/second-iteration/hsw-export")
drop=read.csv("R-drop.csv")
View(drop)
drop=read.csv("R-drop.csv", row.names=1)
View(drop)
R.sample <- read.csv("~/ccr-office/summer-workshop/2013/project/protein-data/second-iteration/hsw-export/R-sample.csv")
View(R.sample)
setwd("~/ccr-office/summer-workshop/2013/workshop-dev/project/protein-data")
expUrl <- read.csv("~/ccr-office/summer-workshop/2013/workshop-dev/project/protein-data/expUrl.csv")
View(expUrl)
drop=read.csv("drop.csv")
str(drop)
experiment <- read.csv("~/ccr-office/summer-workshop/2013/workshop-dev/project/protein-data/experiment.csv", header=F)
View(experiment)
rm(experiment)
exper=read.csv("experiment.csv")
view(exper)
View(exper)
experiment <- read.csv("~/ccr-office/summer-workshop/2013/workshop-dev/project/protein-data/experiment.csv")
View(experiment)
rm(experiment)
experiment <- read.csv("~/ccr-office/summer-workshop/2013/workshop-dev/project/protein-data/experiment.csv")
View(experiment)
sample <- read.csv("~/ccr-office/summer-workshop/2013/workshop-dev/project/protein-data/sample.csv")
View(sample)
experiment <- read.csv("~/ccr-office/summer-workshop/2013/workshop-dev/project/protein-data/experiment.csv")
View(experiment)
source('~/ccr-office/summer-workshop/2013/workshop-dev/examples/mm-single-example.R')
source('~/ccr-office/summer-workshop/2013/workshop-dev/examples/mm-single-example.R')
experiment <- read.csv("~/ccr-office/summer-workshop/2013/workshop-dev/project/protein-data/experiment.csv")
View(experiment)
vector = vec
vector = c(2,3)
vector
?vector
for = c(2,3)
function = "woohoo"
try.this = 33.3
oneMoreTime="woohoo"
_phooey=FALSe
??apply
2y=2
lis = c("a","b","c","d")
sapply(lis, print)
?print
print(lis)
apply(lis, print)
lapply(lis, print)
class(lis)
sapply(lis, class)
foo=sapply(lis, class)
foo
class(foo)
str(foo)
?pie
source('~/ccr-office/summer-workshop/2013/workshop-dev/examples/piecharts-Cars93.R')
hist(Cars93$RPM,
xlab="engine RPM",
main="histogram of engine RPM",
col="red")
plot(density(Cars93$RPM))
plot(density(Cars93$RPM),)
plot(density(Cars93$RPM),xlab="engine RPM, main="density plot of engine RPM")
plot(density(Cars93$RPM),xlab="engine RPM", main="density plot of engine RPM")
plot(density(Cars93$RPM),xlab="engine RPM", main="density plot of engine RPM", fill="red")
?plot
warnings()
plot(density(Cars93$RPM),xlab="engine RPM", main="density plot of engine RPM", col="red")
?density
